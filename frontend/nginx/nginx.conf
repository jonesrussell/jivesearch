user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

env NGINX_DOMAIN;
env ONION;

http { 
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65; # probably can be lowered
  types_hash_max_size 2048;    
  server_names_hash_bucket_size 1024;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
    
  gzip on;
  gzip_disable "msie6";
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  map_hash_bucket_size 128;
  map $http_referer $http_referer_path {
      "~^(?P<path>[^?]*)(\?.*)?$" $path;
  }

  # strip the query param for "/" and "/autocomplete" logging
  # /?&l=&n=&o=&r= .... how do we leave off the vars when they are blank???
  map $request_uri $p {
    ~(?<path>[^?]*) $path; # Since $uri and $request_uri can change then best to do this???
  }

  map $arg_q $query{
    "" 0;
    default 1;
  }

  map "$p:$query" $req_uri{
    "/:1" "/$is_args&q=[redacted]&l=$arg_l&n=$arg_n&o=$arg_o&p=$arg_p&r=$arg_r&ref=$arg_ref&d=$arg_d";
    "/autocomplete:1" "/autocomplete$is_args";
    "~/image/.+:0" "/image/[redacted]"; # remove the actual image from the url
    "/proxy:1" "/proxy/$is_args&q=[redacted]&css=$arg_css";
    "/proxy_header:1" "/proxy_header/$is_args&q=[redacted]";
    "/ngx_pagespeed_beacon:0" "/ngx_pagespeed_beacon$is_args&url=[redacted]";
    "/answer:1" "/answer$is_args&q=[redacted]&callback=[redacted]&_=[redacted]";
    default $request_uri;
  }

  log_format minimal '$time_local $http_referer_path $status $request_time $req_uri';
  access_log /var/log/nginx/access.log minimal; # can't customize error.log format.

  limit_req_zone $binary_remote_addr zone=autocomplete:10m rate=5r/s;
  limit_req_zone $binary_remote_addr zone=static:10m rate=10r/s;
  limit_req_zone $binary_remote_addr zone=basic:10m rate=1r/s;
  limit_req_zone $binary_remote_addr zone=images:100m rate=100r/s;
  limit_conn_zone $binary_remote_addr zone=addr:10m; # limit # of open connections for an IP

  proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=nginx_cache:10M max_size=100M inactive=10m;
  proxy_cache_path /tmp/image_cache levels=1:2 keys_zone=image_cache:10M max_size=100M inactive=1440m;
  proxy_cache_lock on;
  proxy_cache_use_stale updating;
  proxy_cache_valid 200 302 10m;
  proxy_cache_valid 404      1m;
 
  server { # don't force https for .onion
    set_by_lua $onion 'return os.getenv("ONION")';
    server_name $onion;
    listen 80;
    listen [::]:80;
    include server.conf;
    server_name_in_redirect off; # for Tor
    port_in_redirect off; # for Tor
    server_tokens off; # for Tor
  }
	
  server {      
    set_by_lua $nginx_domain 'return os.getenv("NGINX_DOMAIN")';
    server_name $nginx_domain www.$nginx_domain;
    listen 80; # using default_server here screws up our .onion
    listen [::]:80; # using default_server here screws up our .onion
    listen 443 ssl;
    listen [::]:443 ssl;
    include server.conf;
    
    add_header Content-Security-Policy "default-src https: 'unsafe-inline' 'unsafe-eval'; img-src 'self' https://* blob: data:; worker-src 'self' blob:; object-src 'self' data:;";      
      
    # Lua can't dynamically set the domain here so path has to be "/etc/letsencrypt/live/domain"
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_certificate /etc/letsencrypt/live/domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/domain/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;		
      
    if ($scheme != "https") {
      return 301 https://$host$request_uri;
    }
  }    
}